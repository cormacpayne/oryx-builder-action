name: 'Oryx++ Builder GitHub Action'
description: 'Uses the Oryx++ Builder to build a runnable image for an application and deploy it to an Azure Container App'

inputs:
  appSourcePath:
    description: 'The path (on the current runner) to the source of the application to be built.'
    required: true
  azureCredentials:
    description: "Azure credentials used by the `azure/login` action to authenticate Azure CLI requests."
    required: true
  acrName:
    description: 'The name of the Azure Container Registry that the runnable application image will be pushed to.'
    required: true
  acrUsername:
    description: 'The username used to authenticate push requests to the provided Azure Container Registry.'
    required: true
  acrPassword:
    description: 'The password used to authenticate push requests to the provided Azure Container Registry.'
    required: true
  containerAppName:
    description: |
      "The name of the Azure Container App that will be created or updated. If not provided, this value will be
      oryx-builder-<github-run-id>-<github-run-attempt>."
    required: false
    default: 'oryx-builder-${{ github.run_id }}-${{ github.run_attempt }}'
  resourceGroup:
    description: 'The resource group that the Azure Container App will be created in. If not provided, this value will be <container-app-name>-rg'
    required: false
  containerAppEnvironment:
    description: |
      'The name of the Azure Container App environment to use with the application. If not provided, an existing environment in the resource group
      of the Container App will be used, otherwise, an environment will be created in the format <container-app-name>-env'
    required: false
  runtimeStack:
    description: |
      "The platform version stack that the application runs in when deployed to the Azure Container App. This should
      be provided in the format <platform>:<version>. If not provided, this value is determined by Oryx based on the contents of
      the provided application. Please view the following document for more information on the supported runtime stacks for Oryx:
      https://github.com/microsoft/Oryx/blob/main/doc/supportedRuntimeVersions.md"
    required: false
  targetPort:
    description: 'The designated port for the application to run on. If not provided, this value is 80 for Python and 8080 for all other supported platforms.'
    required: false

runs:
  using: "composite"
  steps:  
    - name: Install pack CLI
      shell: bash
      run: (curl -sSL "https://github.com/buildpacks/pack/releases/download/v0.27.0/pack-v0.27.0-linux.tgz" | sudo tar -C /usr/local/bin/ --no-same-owner -xzv pack)

    - name: Install containerapp extension for Azure CLI
      shell: bash
      run: az extension add --name containerapp

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ inputs.azureCredentials }}
    
    - name: Log in to Azure Container Registry
      uses: docker/login-action@v2.0.0
      with:
        registry: ${{ inputs.acrName }}.azurecr.io
        username: ${{ inputs.acrUsername }}
        password: ${{ inputs.acrPassword }}
    
    - name: Export resource group to environment variable
      shell: bash
      run: |
        RESOURCE_GROUP="${{ inputs.resourceGroup }}"
        echo "RESOURCE_GROUP=${RESOURCE_GROUP}" >> $GITHUB_ENV
    
    - name: Determine resource group if not provided
      if: ${{ inputs.resourceGroup == '' }}
      shell: bash
      run: |
        RESOURCE_GROUP="${{ inputs.containerAppName }}-rg"
        echo "RESOURCE_GROUP=${RESOURCE_GROUP}" >> $GITHUB_ENV
    
    - name: Export environment to environment variable
      if: ${{ inputs.containerAppEnvironment != '' }}
      shell: bash
      run: |
        CONTAINER_APP_ENVIRONMENT_ARG="--environment ${{ inputs.containerAppEnvironment }}"
        echo "CONTAINER_APP_ENVIRONMENT_ARG=${CONTAINER_APP_ENVIRONMENT_ARG}" >> $GITHUB_ENV        
    
    - name: Export runtime stack to environment variable
      shell: bash
      run: |
        RUNTIME_STACK="${{ inputs.runtimeStack }}"
        echo "RUNTIME_STACK=${RUNTIME_STACK}" >> $GITHUB_ENV
    
    - name: Determine runtime stack if not provided
      if: ${{ inputs.runtimeStack == '' }}
      shell: bash
      run: |
        docker run --rm -v ${{ inputs.appSourcePath }}:/app cormtestacr.azurecr.io/oryx/cli:latest /bin/bash -c "oryx dockerfile /app | head -n 1 | sed 's/ARG RUNTIME=//' >> /app/oryx-runtime.txt"
        RUNTIME_STACK=$(head -n 1 ${{ inputs.appSourcePath }}/oryx-runtime.txt)
        echo "RUNTIME_STACK=${RUNTIME_STACK}" >> $GITHUB_ENV
        rm ${{ inputs.appSourcePath }}/oryx-runtime.txt
    
    - name: Export target port to environment variable
      shell: bash
      run: |
        TARGET_PORT="${{ inputs.targetPort }}"
        echo "TARGET_PORT=$(TARGET_PORT)" >> $GITHUB_ENV
    
    - name: Determine default target port if not provided
      if: ${{ inputs.targetPort == '' }}
      shell: bash
      run: |
        if [ ${{ env.RUNTIME_STACK }} = python:* ]; then echo "TARGET_PORT=80" >> $GITHUB_ENV; else echo "TARGET_PORT=8080" >> $GITHUB_ENV; fi
    
    - name: Set Oryx++ Builder as default builder
      shell: bash
      run: pack config default-builder cormtestacr.azurecr.io/builder:latest
    
    - name: Create runnable application image
      shell: bash
      run: pack build ${{ inputs.acrName }}.azurecr.io/oryx-builder/app:${{ github.run_id }}.${{ github.run_attempt }} --path ${{ inputs.appSourcePath }} --builder cormtestacr.azurecr.io/builder:latest --run-image cormtestacr.azurecr.io/builder/stack/${{ env.RUNTIME_STACK }}

    - name: Push image to Azure Container Registry
      shell: bash
      run: docker push ${{ inputs.acrName }}.azurecr.io/oryx-builder/app:${{ github.run_id }}.${{ github.run_attempt }}
    
    - name: Create or update Azure Container App
      shell: bash
      run: az containerapp up --name ${{ inputs.containerAppName }} --resource-group ${{ env.RESOURCE_GROUP }} ${{ env.CONTAINER_APP_ENVIRONMENT_ARG }} --image ${{ inputs.acrName }}.azurecr.io/oryx-builder/app:${{ github.run_id }}.${{ github.run_attempt }} --target-port ${{ env.TARGET_PORT }} --registry-server ${{ inputs.acrName }}.azurecr.io --registry-username ${{ inputs.acrUsername }} --registry-password ${{ inputs.acrPassword }}
